const path = require('path');
const webpack = require('webpack');
const { readJSON } = require('fs-extra');

module.exports = async function (presentationPath: string) {
  const structure = await readPresentationStructure(presentationPath);
  const webpackCommonConfig = require('./webpack.common.config.js')(structure, presentationPath);

  return Object.assign(webpackCommonConfig, {
    context: presentationPath,
    entry: () => {
      const components = require('./getComponents')(presentationPath);

      return [
        require.resolve('babel-polyfill/dist/polyfill.js'),
        `slides-loader?components=${encodeURIComponent(JSON.stringify(components))}!components-list-loader?presentationPath=${presentationPath}!./index.js`,
      ];
    },
    output: {
      path: path.join(presentationPath, 'build', 'dev'),
      filename: 'app.js'
    },
    plugins: [
      ...webpackCommonConfig.plugins
    ]
  })
}

function readPresentationStructure(presentationPath: string): Promise<Structure> {
  return readJSON(path.join(presentationPath, 'structure.json'))
    .catch(() => ({}));
}

type Structure = {
  slides: {
    [key: string]: Slides
  }
  chapters: {
    [key: string]: Chapter
  },
  storyboard: string[]
}

type Slides = {
  name: string,
  template: string
}

type Chapter = {
  name: string,
  content: string[]
}
