const path = require('path');
const webpack = require('webpack');
const getWebpackDevConfig = require('./webpack.dev.config');
import { Observable, Observer, Subject } from 'rx';

export class BuildWatcher {
  private presentationPath: string;
  private watcher: any;
  private watcher$: any;
  constructor(presentationPath: string) {
    this.presentationPath = presentationPath;
  }

  public start(): Observable<any> {
    if(!this.watcher$){
      const watcher = this.createWatcher({
        ignored: ["**/*.*", "!**/*.vue", "!**/structure.json"]
      });

      return Observable.just(this.presentationPath)
        .flatMap(getWebpackDevConfig)
        .map(webpack)
        .map(watcher)
        .mergeAll()
    }

    return this.watcher$;
  }

  public stop(): Promise<any> {
    return Observable.fromCallback(this.watcher.close, this.watcher)()
      .toPromise() as Promise<any>;
  }

  private createWatcher(options: any): (compiler: any) => Observable<any> {
    return (compiler) => {
      const watch = function(){
        return this.watcher = compiler.watch(...arguments)
      };

      return this.watcher$ = Observable.fromNodeCallback(watch, this)(options)
    };
  }
}

declare function require(name: string): any;