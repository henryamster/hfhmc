const fs = require('fs');
const readJSONSync = require('fs-extra').readJSONSync;
const path = require('path');
const loaderUtils = require('loader-utils');

const APP_ID = 'app';

module.exports = function (source) {
    const { presentationPath } = loaderUtils.getOptions(this);
    let currentSlideId;
    let structure;
    this.resourcePath = this.resourcePath.replace(/\\/g, '/');

    if (!this.resourcePath.includes('/slides/') && !this.resourcePath.includes('App.vue')) {
        return source
    }

  try {
    structure = readJSONSync(path.join(presentationPath, 'structure.json'))
  }catch (err){
    structure = {}
  }

  const vueFileContent = fs.readFileSync(this.resourcePath).toString()
        .replace(/&apos;/g, "'")
        .replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;>/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/\r?\n|\r/g, '')
        .replace(/> </g, '><')

    //TODO: remove structure
  if(structure && structure.slides){
    currentSlideId = Object.keys(structure.slides)
      .find((slideId) => this.resourcePath.endsWith(structure.slides[slideId].template));
  }

  let template = /<template>(.*?)<\/template>/.exec(vueFileContent)[1];
    template = template.replace(/'/g, '\\\'');
  const moduleFilePath = path.relative(presentationPath, this.resourcePath);

  source += `Component.options.template = '${template}';`;
  source += `Component.options.slideId = '${currentSlideId || APP_ID}';`;
  source += `Component.options.resourcePath = '${moduleFilePath}';`;

  return source
}
